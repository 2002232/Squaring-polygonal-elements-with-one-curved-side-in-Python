# -*- coding: utf-8 -*-
"""cubature_rules_1D.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O5mjsPTA7uo0Zqtk-ZYFHJgMNC7g8VrR
"""

import numpy as np

def cubature_rules_1D(n,cubature_type):

  # SEE WALDVOGEL PAPER. ADDED NODES

  # Weights of the Fejer2, Clenshaw-Curtis and Fejer1 quadrature by DFTs
  # n>1. Nodes: x_k = cos(k*pi/n)

  N = np.array(range(1,n,2))
  l = len(N)
  K = np.array(range(0,n-l))

  match cubature_type:
    case 1:       # FEJER 1
      v0 = np.append([2*np.exp(1j*np.pi*K/n)/(1-4*K**2)],[0]*(l+1))
      v1 = v0[:-1]+np.conjugate(v0[:0:-1])
      weights = np.real(np.fft.ifft(v1))  # Imaginary residual
      k = np.arange(.5 , n+.5)
      nodes = np.cos(k*np.pi/n)

    case 2:       # FEJER 2
      v0 = np.append(2/N/(N-2), [1/N[-1]]+ [0]*(n-l))
      v2 = -v0[:-1]-v0[:0:-1]
      weights = np.append(np.fft.ifft(v2),0)
      k = np.array(range(0,n+1))
      nodes = np.cos(k*np.pi/n)

    case 3:       # CLENSHAW CURTIS
      g0 = -np.ones(n)
      g0[l] = g0[l]+n
      g0[n-l] = g0[n-l]+n
      g=g0/(n**2-1+n%2)
      v0 = np.append(2/N/(N-2), [1/N[-1]]+ [0]*(n-l))
      v2 = -v0[:-1]-v0[:0:-1]
      wcc = np.real(np.fft.ifft(v2+g))  # Imaginary residual
      weights = np.append(wcc, wcc[0])
      k = np.array(range(0,n+1))
      nodes = np.cos(k*np.pi/n)

    case 4:       # GAUSS LEGENDRE
      beta = .5/np.sqrt(1-1/((2*np.array(range(1,n+1)))**2))
      T = np.diag(beta,1)+np.diag(beta,-1)
      nodes,V=np.linalg.eigh(T)
      index = np.argsort(nodes)
      nodes = np.sort(nodes)
      weights = 2*V[0]**2


  return nodes, weights